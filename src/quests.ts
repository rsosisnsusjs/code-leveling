import * as vscode from "vscode";

export interface DailyQuest {
  id: string;
  name: string;
  description: string;
  target: number;
  progress: number;
  completed: boolean;
  reward: {
    type: "xp" | "xpMultiplier" | "rankBoostChance";
    amount?: number;
    multiplier?: number;
    durationSeconds?: number;
  };
}

export interface Buff {
  type: "xpMultiplier" | "rankBoostChance";
  multiplier?: number;
  expiresAt: number;
}

export interface DailyQuestState {
  quests: DailyQuest[];
  activeBuffs: Buff[];
}

const defaultQuests: DailyQuest[] = [
  {
    id: "daily_login",
    name: "‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏™‡∏π‡πà‡πÇ‡∏•‡∏Å‡∏Å‡∏ß‡πâ‡∏≤‡∏á",
    description: "‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô VS Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö EXP",
    target: 1,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 50 },
  },
  {
    id: "write_1000_chars",
    name: "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏Ñ‡πâ‡∏î 1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£",
    description: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î 1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏µ! ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ!",
    target: 1000,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 200 },
  },
  {
    id: "save_file_5_times",
    name: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    description:
      "‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏Å‡πâ‡∏≤‡∏ß‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á! Save ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô VS Code 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á!",
    target: 5,
    progress: 0,
    completed: false,
    reward: { type: "xpMultiplier", multiplier: 2, durationSeconds: 120 },
  },
  {
    id: "type_special_word",
    name: "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå! 'Sun God Nikga'",
    description: "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'Sun God Nikga' ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!",
    target: 1,
    progress: 0,
    completed: false,
    reward: { type: "rankBoostChance" },
  },
  {
    id: "git_commit",
    name: "‡∏à‡∏±‡∏Å‡∏£‡∏û‡∏£‡∏£‡∏î‡∏¥‡πÅ‡∏´‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î",
    description: "commit ‡πÇ‡∏Ñ‡πâ‡∏î 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏•‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏£‡∏∂‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!",
    target: 1,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 100 },
  },
  {
    id: "git_push",
    name: "‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤",
    description:
      "push ‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á remote ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á! ‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏á‡∏≥‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á!",
    target: 5,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 1000 },
  },
  {
    id: "git_init",
    name: "‡∏ú‡∏π‡πâ‡∏õ‡∏•‡∏∏‡∏Å‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô",
    description: "‡πÉ‡∏ä‡πâ git init ‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏´‡∏ô‡∏∂‡πà‡∏á",
    target: 1,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 200 },
  },
  {
    id: "type_5000_chars",
    name: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡πÄ‡∏ó‡∏û",
    description: "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏£‡∏ß‡∏° 5000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
    target: 5000,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 1000 },
  },
  {
    id: "type_1000_lines",
    name: "‡∏£‡∏≤‡∏ä‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤",
    description: "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏£‡∏ö 1000 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!",
    target: 1000,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 1669 },
  },
  {
    id: "longest_combo",
    name: "‡∏´‡∏±‡∏ï‡∏ñ‡πå‡πÅ‡∏´‡πà‡∏á‡πÄ‡∏ó‡∏û! ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ!",
    description: "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ!",
    target: 1,
    progress: 0,
    completed: false,
    reward: { type: "xp", amount: 500 },
  },
];

export async function loadDailyQuests(
  context: vscode.ExtensionContext
): Promise<DailyQuestState> {
  let state = context.globalState.get<DailyQuestState>("dailyQuestState");
  if (!state) {
    state = {
      quests: defaultQuests,
      activeBuffs: [],
    };
    await context.globalState.update("dailyQuestState", state);
  }
  return state;
}

export async function updateQuestProgress(
  context: vscode.ExtensionContext,
  questId: string,
  increment: number
): Promise<void> {
  const state = await loadDailyQuests(context);
  const quest = state.quests.find((q) => q.id === questId);
  if (!quest || quest.completed) return;

  quest.progress += increment;
  if (quest.progress >= quest.target) {
    quest.progress = quest.target;
    quest.completed = true;

    // Apply rewards
    if (quest.reward.type === "xp") {
      const xpData = context.globalState.get<{ xp: number; rank: string }>(
        "xpData"
      ) || {
        xp: 0,
        rank: "E-Rank | Rookie Hunter",
      };
      xpData.xp += quest.reward.amount ?? 0;
      xpData.rank = xpData.xp ? getRank(xpData.xp) : "E-Rank | Rookie Hunter";
      await context.globalState.update("xpData", xpData);
      vscode.window.showInformationMessage(
        `üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö EXP +${quest.reward.amount} ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à '${quest.name}'`
      );
    } else if (quest.reward.type === "xpMultiplier") {
      const now = Date.now();
      const buff: Buff = {
        type: "xpMultiplier",
        multiplier: quest.reward.multiplier,
        expiresAt: now + (quest.reward.durationSeconds ?? 600) * 1000,
      };
      state.activeBuffs.push(buff);
      vscode.window.showInformationMessage(
        `üî• ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Buff EXP x${quest.reward.multiplier} ‡∏ô‡∏≤‡∏ô ${quest.reward.durationSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!`
      );
    } else if (quest.reward.type === "rankBoostChance") {
      const buff: Buff = {
        type: "rankBoostChance",
        expiresAt: Date.now() + 600 * 1000,
      };
      state.activeBuffs.push(buff);
      vscode.window.showInformationMessage(
        `üåü ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à!`
      );
    }
  }
  await context.globalState.update("dailyQuestState", state);
}

export function getRank(xp: number): string {
  const ranks = [
    { name: "E-Rank | Rookie Hunter", xp: 0 },
    { name: "D-Rank | Wandering Adventurer", xp: 101 },
    { name: "C-Rank | Spirit Exorcist", xp: 501 },
    { name: "B-Rank | Arcane Alchemist", xp: 1001 },
    { name: "A-Rank | Crimson Hokage", xp: 3001 },
    { name: "S-Rank | The One Punch", xp: 5001 },
    { name: "SS-Rank | Special Grade Sorcerer", xp: 10001 },
    { name: "SSS-Rank | Shadow Monarch", xp: 20001 },
    { name: "Mythical-Rank | Transcendent Being", xp: 40001 },
    { name: "God-Rank | Cosmic Deity", xp: 60001 },
    { name: "True God-Rank | Allfather of Eternity", xp: 100001 },
    { name: "Celestial-Rank | Architect of Creation", xp: 200001 },
    { name: "The One Above All | Supreme Principle", xp: 500001 },
  ];

  let currentRank = "E-Rank | Rookie Hunter";
  for (const rank of ranks) {
    if (xp >= rank.xp) {
      currentRank = rank.name;
    } else {
      break;
    }
  }
  return currentRank;
}

function isNewDay(lastDateStr?: string): boolean {
  if (!lastDateStr) return true;
  const lastDate = new Date(lastDateStr);
  const now = new Date();
  return (
    now.getFullYear() !== lastDate.getFullYear() ||
    now.getMonth() !== lastDate.getMonth() ||
    now.getDate() !== lastDate.getDate()
  );
}

async function resetDailyQuests(context: vscode.ExtensionContext) {
  const state = await loadDailyQuests(context);

  state.quests = defaultQuests.map((q) => ({
    ...q,
    progress: 0,
    completed: false,
  }));

  state.activeBuffs = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Buffs ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  await context.globalState.update("todayCharCount", 0);

  await context.globalState.update("dailyQuestState", state);
}

export async function checkAndResetDailyQuests(
  context: vscode.ExtensionContext
) {
  const lastReset = context.globalState.get<string>("lastQuestReset");

  if (isNewDay(lastReset)) {
    await resetDailyQuests(context);
    await context.globalState.update(
      "lastQuestReset",
      new Date().toISOString()
    );
    vscode.window.showInformationMessage(
      "üîÑ Daily Quests ‡πÑ‡∏î‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß!"
    );
  }
}
